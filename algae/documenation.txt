Instruction
    The simulation runs through the Mesa Visualization module
    Simply run simulation.py and open the interface

    Paramters can be changed in sim_var.py in the sim_variables dictionary
    in sim_var.py there is another dictionary which contains the default variables
    these default variables only serve as a reference as to what the base line parameters
    of the model are.

    Next to running the interface we also recommend you open liveview/algae.jpg 
    and liveview/oxygen.jpg
    algae.jpg is a live illustration of the algae density whereby darker green indicates a higher level
    oxygen.jpg is a live illustration of the oxygen density whereby darker red indicates a higher oxygen density

    For a proper list of parameters we recommend seeing the documentation for 
    fish.py and lake.py

Important data types
    positions of cells are passed in the form(x,y)
    grids are a list of lists containing a agent
    multivargrid are a list of list containing a dictionary with variables

Exlanation of functions used:
    For algae and oxygen several lambda functions are used

    oxygen_damage_func: a linerar function which takes as input the difference betweent
        the oxygen_level and suffocation_threshold. 
    growth_function: using this function algae grows quickly at lower value levels and 
        slows down when reaching its maximum capacity
    oxygen_function:  Algae, make lots of oxygen at lowers while making very little at higher levels 


fish.py
    Base Class for the fish agents in the grid

    Simulation Parameters
        birth_threshold : health at which fish gives birth
        birth_cost : the health reduction achieved when giving birth
        max_algae_intake : the maximum amount of algae a fish can eat
        oxygen_intake : the amount of oxygen 
        suffocation_threshold : when oxygen_level below this threshold fish will take damage according to oxygen_damage_func
        oxygen_damage_func : function of damage as product of oxygen_level and suffocation_threshold difference 
        hunger_rate : the rate at which a fish loses health naturally
            Default value is a linear relationship 

        fish_health is passed by Lake due to it's necessity during Agent Initialization

    __init__(unique_id, model, starting_health, hunger_rate)
    # The iniialization of the agent, containing variables that should not be modified
        unique_id: Unique ID scheduler uses to track fish
        model: The model for the fish. Model used should be Lake(see below)
        starting_health: The starting health of a fish. Should be kept unchanged to prevent excessive birth or deaths on step = 1
        hunger_rate: the rate at which the fish loses health each turn

    step()
    #  A single step taken by the Fish. Contains a set of decisions to determine Fish behavior
        1. Fish loses set amount of health based on hunger_rate
        2. Check if oxygen_level is below suffocation_threshold
            a. if under threshold Fish receives a health reduction determined by oxygen_damage_func
        3. Check if Fish is over_birth threshold and has free space availabe
            a. if both conditions are met run birth()
        4. Check if health = 0
            a. If health = 0, run die()
        5. Stochastically move towards food
        
    move(new_position):
    # Move fish to new new_position
        Move to new new_position
    
    get_free_space(can_move_center):
    # Return a list of availabe space
        can_move_center: Indicate whether returned position is the one agent is on currently
    
    locate_food():
    # Move to location based on feed density:
        Fish pseudorandomly move towards a new position, with a preference for algae dense areas
    
    def check_for_food():
    #   Check whether current cell has algae:
    Determines if current pos an algae level > 0 

    def eat():
    # Consume patch of algae
        1. Run calculate_food_intake to determine how much algae can be consumed
        2. Add that amount to the algae grid
        3. Remove that amount from the oxygen grid
    
    def calculate_food_intake():
    #   Calculate how much a Fish eats
        - Fish will consume more then necessary to obtain max health
        - Fish cannot consume more algae then on pos
        - Fish cannot eat more then the specific max intake

    def die()
    # Kill Fish
        1. Set Fish living to False
        2. Remove Fish from scheduler
        3. Remove Fish from grid

    def birth()
    #   Give birth

lake.py()
    Base Model Class for lake
    Contains the Grid for Fish and the Multi-Variable Grid 

    __init__(N, width, height, starting, hunger_rate)
    # Initialize Lake
        N :Number of fish starting in the grid
        width, height: width and height of the grid
        starting_health: starting_health for fish
        
        hunger_rate for fish 
        schedule: scheduler used. taken from mesa.time
            Default scheduler is RandomActivation 
        grid : grid holding agents
            Default is SingleGrid, Mutligrid or HexGrid will not work for program
        self.running: necessary for running Mesa CanvasGrid 

        1. Make MultiVarGrid class containing algae and oxygen values
            Values are randomly made using oxygen_value_minimum and algae_value_minimum
        
        2. Produce N amount of Fish agent place randomly in grid
            a. keep track of fish agent_id to ensure no duplicates are spawned
            b. No tow fish can spawn on same spot
    
    Functions below are triggered by Fish
    
    make_oxyOgen(oxygen_func):
    # Add oxygen produced by algae
        1. Get algae_value 
        2. Use oxygen_func to make oxygen and add this to MultiVarGrid
    
    create_new_agent(pos, starting_health):
    # Create a new Fish Agent
        Makes a new fish using a unique ID
    
    step()
    #   Single step in the model

    display_variables()
    # Write variables to liveview files for live display_variables
        Displays variables as a heatmap to the liveview/ directory
        Have these files open in an IDE to get a live preview of the files
        Slows down program at larger grids
    
mutivargrid.py
    Grid Type inspired my Mesa's Base Grid Model
    Cells are dictionaries all contaning a variable and a value
    Variable type ares shared between all cells, but the value of the variable differs
    The grid is initialized similar to the Mesa Grid Base Class. The main difference 
    being that it contains dictionary with variables, not agents.

    __init__(width, height, variables)
    #   Create new grid along with its variables
    width, height : multi variable grid dimensions
    variables: variables passed 
        variables are a dictionary where thete key is the variable name
        the value is the minimum value this variable can be initialized at

        A rando lambda function is used to assign the value of the variable to the grid
        The formation fo a grid functions identical to Mesa Grid Base Class 
    
    spread(variable, radius)
    # Inducing spreading of passed variables
        spread() runs the get_spread function, which returns a grid
        this grid replaces the values of all variables in the multivargrid
    
    get_variable_spread(variable, radius):
    # For a given variable, apply the spread method   
        variable : variable being search for
        growth_func : function used to determine growth amount

        Spread is a method used whereby the content of a cells is equally distributed to 
        it's neighbors. in get_variable_spread a grid is returned that contains the results of
        all variable spread. 

        1. Iterate through each cell in the mutivar grid
        2. Calculate the spread_amount of the cell
        3. Get the coordinates of the neighborhood(cell + all other cells in the range indicated)
            and add the spread amount
    
    growth_grid(variable, growth_func)
    # For a given variable, apply the growth method
        variable : variable being search for
        growth_func : function used to determine growth amount
        Growth is similar to spread, although the instead of the content of the cell being 
        distributed, the surrounding neighbors experience an increase in value. 

        1. Make a copy of current variable values
        2. Iterate through each cell in the multi vard grid
        3. Calculate the growth_amount of the cell
        4. Find the coordinates of neighbors and replace it in the multivargrid
    
    return_variable_grid(variable)
    #   Return a list of list where the cells represent the value of that variable
        variable : the variable of interest
    
    return_grid()
    #   Return the whole grid, including all variables
        returns the content of the whole grid.
        in the form of a list of list with dictionary
        [[{var : value}]]
    
    get_value(pos, variable)
    # Get value for a variable in a given_cell

    add_value(pos, variable)
    # Add value for a variable in a given_cell

    get_neighborhood(pos, radius)
    # For a given position get the center positon and each cell in its radius
        pos: position of center cell
        radius: radius of the cells included in search

    out_of_bounds()
    # Determines if a position is out of bounds


